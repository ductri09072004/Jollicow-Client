@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    Layout = null;

    if (ViewData["IdTable"] == null)
    {
        ViewData["IdTable"] = ViewContext.RouteData.Values["id_table"]?.ToString() ?? "B01";
    }
    if (ViewData["RestaurantId"] == null)
    {
        ViewData["RestaurantId"] = ViewContext.RouteData.Values["restaurant_id"]?.ToString() ?? "CHA1001";
    }

    @* Lấy topping *@
    var toppings = ViewData["Toppings"] as List<ToppingModels> ?? new List<ToppingModels>();
    var sizeOptions = toppings?.FirstOrDefault(t => t.Type == ToppingType.Size)?.options ?? new List<ToppingOptions>();
    var spicyOptions = toppings?.FirstOrDefault(t => t.Type == ToppingType.Spice)?.options ?? new List<ToppingOptions>();
    var toppingGroups = toppings?.Where(t => t.Type == ToppingType.Other).ToList() ?? new List<ToppingModels>();
}

@model DishesModels

<style>
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, Helvetica, sans-serif !important;
    }

    .back-button {
        position: fixed;
        top: 16px;
        left: 16px;
        z-index: 1000;
        background: #E31837;
        color: white;
        border: none;
        border-radius: 12px;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .back-button:hover {
        background: white;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .back-button i {
        font-size: 20px;
        color: #333;
    }

    .dish-info {
        padding: 20px;
    }

    .dish-name {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin-bottom: 8px;
    }

    .dish-price {
        font-size: 20px;
        color: #E31837;
        font-weight: 600;
        margin-bottom: 16px;
    }

    .option-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #E9E9E9;
    }

    .option-title {
        font-size: 16px;
        font-weight: 600;
        color: #333;
        margin-bottom: 12px;
    }

    .option-group {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .option-item {
        display: flex;
        flex-direction: column;
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .option-item.selected {
        background-color: #E31837;
        color: white;
        border-color: #E31837;
    }

    .option-item:hover {
        border-color: #E31837;
    }

    .toppings-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #E9E9E9;
    }

    .toppings-title {
        font-size: 16px;
        font-weight: 600;
        color: #333;
        margin-bottom: 12px;
    }

    .topping-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #E9E9E9;
    }

    .topping-item:last-child {
        border-bottom: none;
    }

    .topping-name {
        color: #666;
    }

    .topping-price {
        color: #E31837;
        font-size: 12px;
        transition: all 0.3s ease;
    }

    .option-item.selected .topping-price {
        color: #ffffff;
    }

    .checkbox-wrapper {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .checkbox-wrapper input[type="checkbox"] {
        width: 18px;
        height: 18px;
        accent-color: #E31837;
    }

    .note-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #E9E9E9;
    }

    .note-input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        resize: none;
        font-family: inherit;
    }

    .note-input:focus {
        outline: none;
        border-color: #E31837;
    }

    .cart-button {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background: white;
        padding: 16px;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1px solid #E9E9E9;
    }

    .cart-button button {
        background: #E31837;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .cart-button button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .total-price {
        font-size: 20px;
        font-weight: 600;
        color: #E31837;
    }

    .main-content {
        padding-bottom: 80px;
        /* Space for fixed cart button */
    }

    .quantity-section {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #E9E9E9;
        display: flex;
        align-items: start;
        justify-content: space-between;
    }

    .quantity-title {
        font-size: 16px;
        font-weight: 600;
        color: #333;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .quantity-btn {
        width: 28px;
        height: 28px;
        border: none;
        background: #E31837;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 18px;
        color: #333;
    }

    .quantity-btn:disabled {
        color: #ccc;
        cursor: not-allowed;
    }

    .quantity-input {
        width: 42px;
        height: 28px;
        text-align: center;
        border: 1px solid #E9E9E9;
        border-radius: 8px;
        padding: 4px;
        font-size: 16px;
    }

    .quantity-input:focus {
        outline: none;
        border-color: #E31837;
    }

    .option-item-init {
        color: #909090;
    }
</style>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Jollicow</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Jollicow.styles.css" asp-append-version="true" />
</head>

<body class="m-0 p-0 w-100 gap-0">
    <button class="back-button" onclick="goBack()">
        <i class="bi bi-x" style="color: white; font-size: 25px;"></i>
    </button>
    <div class="main-content">
        <img src="@Model.image" alt="Hình ảnh món ăn" style="width: 100%; height: 20%; object-fit: cover;" />
        <div class="d-flex flex-column m-0 p-0" style="padding: 12px;">
            <div class="dish-info">
                <h1 class="dish-name fw-bold" style="font-size: 16px;">@Model.name</h1>
                <div class="dish-price">@(Model.price.ToString("N0")) đ</div>

                <!-- Kích thước & Độ cay -->
                @if ((sizeOptions != null && sizeOptions.Count > 0 && sizeOptions.Any()) || (spicyOptions != null &&
                                spicyOptions.Count > 0 && spicyOptions.Any()))
                {
                    <div class="option-section">
                        @if (sizeOptions != null && sizeOptions.Count > 0 && sizeOptions.Any())
                        {
                            <h2 class="option-title">Kích thước</h2>
                            <div class="option-group" id="sizeGroup">

                                @foreach (var topping in sizeOptions)
                                {
                                    <div class="option-item" data-price="@topping.price">
                                        @topping.name
                                        <span class="topping-price">+@(int.Parse(topping.price).ToString("N0")) đ</span>
                                    </div>
                                }

                            </div>
                        }

                        @if (spicyOptions != null && spicyOptions.Count > 0 && spicyOptions.Any())
                        {
                            <h2 class="option-title">Độ cay</h2>
                            <div class="option-group" id="spicyGroup">
                                @foreach (var topping in spicyOptions)
                                {
                                    <div class="option-item" data-price="@topping.price">
                                        @topping.name
                                    </div>
                                    <span class="topping-price">+@(int.Parse(topping.price).ToString("N0")) đ</span>
                                }
                            </div>
                        }
                    </div>
                }



                @if (toppingGroups != null && toppingGroups.Any())
                {
                    foreach (var group in toppingGroups)
                    {
                        <h5 class="dish-name fw-bold" style="font-size: 16px;">@group.name_details</h5>

                        foreach (var topping in group.options)
                        {
                            <div class="topping-item">
                                <div class="checkbox-wrapper">
                                    <input type="checkbox" id="@topping.id_option" name="topping" data-price="@topping.price">
                                    <label for="@topping.id_option" class="topping-name">@topping.name</label>
                                </div>
                                <span class="topping-price">+@(int.Parse(topping.price).ToString("N0")) đ</span>
                            </div>
                        }
                        <div class="mb-2"></div>
                    }
                }

                <div class="quantity-section">
                    <div class="quantity-title">Số lượng</div>
                    <div class="quantity-control">
                        <button class="quantity-btn" onclick="decrementQuantity()" id="decrementBtn"
                            style="color:#fff; font-size: 16px;">-</button>
                        <input type="number" class="quantity-input" style="font-size: 12px;" value="1" min="1" max="99"
                            id="quantityInput" onchange="validateQuantity()">
                        <button class="quantity-btn" onclick="incrementQuantity()" id="incrementBtn"
                            style="color:#fff; font-size: 16px;">+</button>
                    </div>
                </div>

                <div class=" note-section">
                    <h2 class="option-title">Ghi chú</h2>
                    <textarea class="note-input" rows="3"
                        placeholder="Ghi chú cho nhân viên, có thể để trống..."></textarea>
                </div>

            </div>
        </div>
    </div>

    <div class="cart-button">
        <div class="total-price" id="totalPrice">@(Model.price.ToString("N0")) đ</div>
        <button onclick="addToCart()">
            <i class="bi bi-cart-plus"></i>
            Thêm vào giỏ
        </button>
    </div>

    <script>
        let basePrice = @Model.price;
        let selectedSizePrice = 0;
        let selectedToppings = new Set();
        let quantity = 1;

        // Function to get cart total from localStorage
        function getCartTotal() {
            return parseInt(localStorage.getItem('cartTotal') || '0');
        }

        // Function to update cart total in localStorage and navbar
        function updateCartTotalFromItems() {
            const cartItems = JSON.parse(localStorage.getItem('cartItems') || '[]');
            const total = cartItems.reduce((sum, item) => sum + (parseFloat(item.price) || 0), 0);
            const cartTotalElement = document.getElementById('cartTotalPrice');
            if (cartTotalElement) {
                cartTotalElement.textContent = total.toLocaleString('vi-VN') + 'đ';
            }
        }

        function updateTotalPrice() {
            const toppingsTotal = Array.from(selectedToppings).reduce((sum, price) => sum + price, 0);
            const total = (basePrice + selectedSizePrice + toppingsTotal) * quantity;
            document.getElementById('totalPrice').textContent = total.toLocaleString() + ' đ';
        }

        function validateQuantity() {
            const input = document.getElementById('quantityInput');
            let value = parseInt(input.value);

            if (isNaN(value) || value < 1) {
                value = 1;
            } else if (value > 99) {
                value = 99;
            }

            input.value = value;
            quantity = value;
            updateTotalPrice();
        }

        function incrementQuantity() {
            const input = document.getElementById('quantityInput');
            let value = parseInt(input.value);
            if (value < 99) {
                input.value = value + 1;
                quantity = value + 1;
                updateTotalPrice();
            }
        }

        function decrementQuantity() {
            const input = document.getElementById('quantityInput');
            let value = parseInt(input.value);
            if (value > 1) {
                input.value = value - 1;
                quantity = value - 1;
                updateTotalPrice();
            }
        }

        // Size selection
        const sizeGroup = document.getElementById('sizeGroup');
        if (sizeGroup) {
            const sizeOptions = sizeGroup.querySelectorAll('.option-item');
            sizeOptions.forEach(option => {
                option.addEventListener('click', () => {
                    sizeOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    selectedSizePrice = parseInt(option.dataset.price);
                    updateTotalPrice();
                });
            });
        }

        // Spicy selection
        const spicyGroup = document.getElementById('spicyGroup');
        if (spicyGroup) {
            const spicyOptions = spicyGroup.querySelectorAll('.option-item');
            spicyOptions.forEach(option => {
                option.addEventListener('click', () => {
                    spicyOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                });
            });
        }

        // Toppings selection
        document.querySelectorAll('input[name="topping"]').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                const price = parseInt(e.target.dataset.price);
                if (e.target.checked) {
                    selectedToppings.add(price);
                } else {
                    selectedToppings.delete(price);
                }
                updateTotalPrice();
            });
        });

        function addToCart() {
            // Gather data
            const dishId = '@Model.id_dishes';
            const dishName = '@Model.name';
            const dishImage = '@Model.image';
            const idTable = '@ViewData["IdTable"]';
            const restaurantId = '@ViewData["RestaurantId"]';
            const note = document.querySelector('.note-input').value;
            const sizeOption = document.querySelector('#sizeGroup .option-item.selected');
            const spicyOption = document.querySelector('#spicyGroup .option-item.selected');
            const selectedToppingLabels = Array.from(document.querySelectorAll('input[name="topping"]:checked')).map(cb => cb.nextElementSibling.textContent.trim());
            const selectedToppingPrices = Array.from(document.querySelectorAll('input[name="topping"]:checked')).map(cb => parseInt(cb.dataset.price));
            const toppingsTotal = selectedToppingPrices.reduce((sum, price) => sum + price, 0);
            const totalPrice = (basePrice + selectedSizePrice + toppingsTotal) * quantity;

            // Prepare payload
            const payload = {
                id_dishes: dishId,
                id_restaurant: restaurantId,
                id_table: idTable,
                name: @Html.Raw(Json.Serialize(Model.name)),
                price: totalPrice,
                quantity: quantity,
                id_topping: selectedToppingLabels,
                note: note,
            };

            console.log("payload", payload);
            // POST to API
            fetch('https://jollicowbe-admin.up.railway.app/api/admin/carts/create', {
                method: 'POST',
                headers:
                {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
                .then(response => {

                    if (!response.ok) throw new Error('Failed to add to cart');
                    return response.json();
                })
                .then(data => {
                    // Optionally update localStorage or UI
                    alert('Đã thêm vào giỏ hàng!');
                    // Optionally update cart UI/total
                    updateCartTotalFromItems();
                })
                .catch(error => {
                    alert('Lỗi khi thêm vào giỏ hàng: ' + error.message);
                });
        }

        function goBack() {
            window.history.back();
        }
    </script>
</body>
